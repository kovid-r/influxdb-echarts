{"remainingRequest":"/Users/kovidrathee/repos/influxdb-echarts/node_modules/babel-loader/lib/index.js!/Users/kovidrathee/repos/influxdb-echarts/node_modules/eslint-loader/index.js??ref--13-0!/Users/kovidrathee/repos/influxdb-echarts/src/main.js","dependencies":[{"path":"/Users/kovidrathee/repos/influxdb-echarts/src/main.js","mtime":1650819987785},{"path":"/Users/kovidrathee/repos/influxdb-echarts/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kovidrathee/repos/influxdb-echarts/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/kovidrathee/repos/influxdb-echarts/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"/Users/kovidrathee/repos/influxdb-echarts/node_modules/core-js/modules/es6.array.iterator.js\";\nimport \"/Users/kovidrathee/repos/influxdb-echarts/node_modules/core-js/modules/es6.promise.js\";\nimport \"/Users/kovidrathee/repos/influxdb-echarts/node_modules/core-js/modules/es6.object.assign.js\";\nimport \"/Users/kovidrathee/repos/influxdb-echarts/node_modules/core-js/modules/es7.promise.finally.js\";\nimport Vue from \"vue\";\nimport App from \"./App.vue\";\nimport \"@/plugins/echarts\";\nimport { InfluxDB } from '@influxdata/influxdb-client';\nVue.config.productionTip = false; // Vue.prototype.log = window.console.log;\n\nvar token = 'v96hkhxEFt0zeXtfPk4heXIUOItCU6em867gAE00R1Gvq8LGE1KsBZNkHjMrejRL6vMDi4sNvhA3QbHwRNv8ow==';\nvar org = 'kovid.rathee@gmail.com';\nvar url = 'https://us-west-2-1.aws.cloud2.influxdata.com'; // const fluxQuery = `\\\n//   sample.data(set: \"airSensor\")\n//   |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n//   |> filter(fn: (r) => r[\"_measurement\"] == \"airSensors\")\n//   |> filter(fn: (r) => r[\"_field\"] == \"temperature\")\n//   |> filter(fn: (r) => r[\"sensor_id\"] == \"TLM0100\")`;\n\nvar queryApi = new InfluxDB({\n  url: url,\n  token: token\n}).getQueryApi(org);\nvar fluxQuery = \"//   sample.data(set: \\\"airSensor\\\")\\n//   |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n//   |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"airSensors\\\")\\n//   |> filter(fn: (r) => r[\\\"_field\\\"] == \\\"temperature\\\")\\n//   |> filter(fn: (r) => r[\\\"sensor_id\\\"] == \\\"TLM0100\\\")\";\nvar sensorValues = [];\n/** Execute a query and receive line table metadata and rows. */\n// queryApi.queryRows(fluxQuery, fluxObserver)\n\nqueryApi.collectRows(fluxQuery\n/*, you can specify a row mapper as a second arg */\n).then(function (data) {\n  data.forEach(function (x) {\n    return sensorValues.push(x);\n  });\n  window.console.log('\\nCollect ROWS SUCCESS');\n}).catch(function (error) {\n  error;\n  window.console.error(error);\n  window.console.log('\\nCollect ROWS ERROR');\n});\nvar fluxData = sensorValues;\nexport { fluxData };\nnew Vue({\n  render: function render(h) {\n    return h(App);\n  }\n}).$mount(\"#app\");",{"version":3,"sources":["/Users/kovidrathee/repos/influxdb-echarts/src/main.js"],"names":["Vue","App","InfluxDB","config","productionTip","token","org","url","queryApi","getQueryApi","fluxQuery","sensorValues","collectRows","then","data","forEach","x","push","window","console","log","catch","error","fluxData","render","h","$mount"],"mappings":";;;;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAO,mBAAP;AACA,SAAQC,QAAR,QAAuB,6BAAvB;AAEAF,GAAG,CAACG,MAAJ,CAAWC,aAAX,GAA2B,KAA3B,C,CACA;;AAEA,IAAMC,KAAK,GAAG,0FAAd;AACA,IAAMC,GAAG,GAAG,wBAAZ;AACA,IAAMC,GAAG,GAAG,+CAAZ,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,QAAQ,GAAG,IAAIN,QAAJ,CAAa;AAACK,EAAAA,GAAG,EAAHA,GAAD;AAAMF,EAAAA,KAAK,EAALA;AAAN,CAAb,EAA2BI,WAA3B,CAAuCH,GAAvC,CAAjB;AAEA,IAAMI,SAAS,mSAAf;AAOA,IAAIC,YAAY,GAAG,EAAnB;AAEA;AACA;;AAEAH,QAAQ,CACLI,WADH,CACeF;AAAU;AADzB,EAEGG,IAFH,CAEQ,UAAAC,IAAI,EAAI;AACZA,EAAAA,IAAI,CAACC,OAAL,CAAa,UAAAC,CAAC;AAAA,WAAIL,YAAY,CAACM,IAAb,CAAkBD,CAAlB,CAAJ;AAAA,GAAd;AACAE,EAAAA,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmB,wBAAnB;AACD,CALH,EAMGC,KANH,CAMS,UAAAC,KAAK,EAAI;AACdA,EAAAA,KAAK;AACLJ,EAAAA,MAAM,CAACC,OAAP,CAAeG,KAAf,CAAqBA,KAArB;AACAJ,EAAAA,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmB,sBAAnB;AACD,CAVH;AAYA,IAAMG,QAAQ,GAAGZ,YAAjB;AACA,SAAQY,QAAR;AAEA,IAAIvB,GAAJ,CAAQ;AACNwB,EAAAA,MAAM,EAAE,gBAAAC,CAAC;AAAA,WAAIA,CAAC,CAACxB,GAAD,CAAL;AAAA;AADH,CAAR,EAEGyB,MAFH,CAEU,MAFV","sourcesContent":["import Vue from \"vue\";\nimport App from \"./App.vue\";\nimport \"@/plugins/echarts\";\nimport {InfluxDB} from '@influxdata/influxdb-client';\n\nVue.config.productionTip = false;\n// Vue.prototype.log = window.console.log;\n\nconst token = 'v96hkhxEFt0zeXtfPk4heXIUOItCU6em867gAE00R1Gvq8LGE1KsBZNkHjMrejRL6vMDi4sNvhA3QbHwRNv8ow=='\nconst org = 'kovid.rathee@gmail.com'\nconst url = 'https://us-west-2-1.aws.cloud2.influxdata.com'\n\n// const fluxQuery = `\\\n//   sample.data(set: \"airSensor\")\n//   |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n//   |> filter(fn: (r) => r[\"_measurement\"] == \"airSensors\")\n//   |> filter(fn: (r) => r[\"_field\"] == \"temperature\")\n//   |> filter(fn: (r) => r[\"sensor_id\"] == \"TLM0100\")`;\n\nconst queryApi = new InfluxDB({url, token}).getQueryApi(org)\n\nconst fluxQuery = `\\\n//   sample.data(set: \"airSensor\")\n//   |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n//   |> filter(fn: (r) => r[\"_measurement\"] == \"airSensors\")\n//   |> filter(fn: (r) => r[\"_field\"] == \"temperature\")\n//   |> filter(fn: (r) => r[\"sensor_id\"] == \"TLM0100\")`;\n\nlet sensorValues = [];\n\n/** Execute a query and receive line table metadata and rows. */\n// queryApi.queryRows(fluxQuery, fluxObserver)\n\nqueryApi\n  .collectRows(fluxQuery /*, you can specify a row mapper as a second arg */)\n  .then(data => {\n    data.forEach(x => sensorValues.push(x))\n    window.console.log('\\nCollect ROWS SUCCESS')\n  })\n  .catch(error => {\n    error\n    window.console.error(error)\n    window.console.log('\\nCollect ROWS ERROR')\n  })\n\nconst fluxData = sensorValues;\nexport {fluxData};\n\nnew Vue({\n  render: h => h(App)\n}).$mount(\"#app\");\n"]}]}